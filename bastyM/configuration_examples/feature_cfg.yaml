# Define feature by giving body part names.
# A feature is defined by a list of body parts.

# Optionally avg., min. or max. of a feature group can be included as follows.
# Only for angle, distance, delta distance and delta angles.
# - avg: [feature 1, feature 2, ..., feature n]
# - min: [feature 1, feature 2, ..., feature n]
# - max: [feature 1, feature 2, ..., feature n]

### ~~~ ###

### Snap features ###

# Use cartesian components (x,y values) of given body-parts, one body-part.
pose:
    - prob
    - halt
    - thor_post
    - a6
    - atip

# Use given body-parts to compute angle values, three body-parts.
angle: [ ]

# Use given body-parts to compute distance values, two body-parts.
distance:
    - [origin, halt]
    - [origin, prob]
    - [origin, thor_post]
    - [origin, atip]
    - [origin, a6]
    - [head, prob]
    - [thor_ant, halt]
    - [thor_post, halt]
    - avg:
      - [thor_post, joint1_top]
      - [thor_post, joint2_top]
      - [thor_post, joint3_top]
    - avg:
      - [thor_post, joint1]
      - [thor_post, joint2]
      - [thor_post, joint3]

### ~~~ ###

### Delta features ###

# Given delta scales, delta feature set will be smoothed on each scale.
# Scales values should be milisecond values.
# Number of frames will be calculated based on the FPS value given in main cfg file.
delta_scales: [1]

# Use given body-parts to compute velocity values, one body-part.
pose_delta:
    - head
    - prob
    - halt
    - thor_post
    - a6
    - atip

# Use given body-parts to compute angular velocity values, three body-parts.
angle_delta: []

# Use given body-parts to compute change in distance values, two body-parts.
distance_delta:
    - [head, prob]
    - [thor_post, prob]
    - [thor_post, halt]
    - [thor_post, a6]
    - avg:
      - [thor_post, t1_tip]
      - [thor_post, t2_tip]
      - [thor_post, t3_tip]

### ~~~ ###

### Window features ###

# Given window sizes, moving std. or/and moving mean can be calculated for each feature.
# You need to call corresponding function explicitly for delta features and/or snap features.
# This is optinal, and not recommended.
# Especially for delta features, computing window features results in many redundant features.
# For n window and m scales, $m \times n$ feature will be generated.
window_sizes:  [300, 500]
