classdef PositionExtraction < bastyM
    %POSITIONEXTRACTION processes features generated by SpatioTemporal
    %class and calculates the position of a fly.

    properties
        bin;
        dormant_body_part;
        orientation;
        movmeanbin
        mask;
        rest_bouts;
        labeledRegions;

    end

    methods
        function obj = PositionExtraction(bin,dormant_body_part,tSnap)
            %POSITIONEXTRACTiON subclass object constructor
            obj.bin = bin;
            obj.dormant_body_part = dormant_body_part;
            obj.tSnap = tSnap;
        end

        function outputArg = method1(obj,inputArg)
            %METHOD1 Summary of this method goes here
            %   Detailed explanation goes here
            outputArg = obj.Property1 + inputArg;
        end

        function calculate_dormant_position(obj)
            %calculate_dormant_position determines the position of a given body part
            %during quiescence bouts.

            %calculate velocity
            meanVel = movmean(abs(diff(obj.tSnap.(obj.dormant_body_part))),obj.fps*obj.bin);

            %use GMM to determine when the animal is active/quiescent
            GMModel = fitgmdist(meanVel,2);

            %lower mean would indicate vel close to zero
            [~,idx] = min(GMModel.mu);

            %cluster the data
            clusters = cluster(GMModel,meanVel);

            %remove movements that are smaller 1/6th of a seconds
            amask = bwareafilt((clusters~=idx),[1,5]);
            clusters(amask) = idx;

            %filter out bouts less than 1 second
            obj.mask = bwareafilt((clusters==idx),[30,inf]);

            [obj.labeledRegions, ~] = bwlabel(obj.mask);

            regionIdx = unique(obj.labeledRegions,'sorted');
            regionIdx(regionIdx==0) = [];
            res_arr = arrayfun(@(x) sum(obj.labeledRegions==x),regionIdx);

            obj.rest_bouts = res_arr;
        end

        function 

        end

        methods (Static)

            function [med_data, bout_time] = calculate_median_bout(tSnap,position,body_part_name)
                %calculate_median_bout determines the median position of the
                %fly during a quiescent bout for a given body_part

                body_part_x = ['pose_',body_part_name, '_x'];
                body_part_y = ['pose_',body_part_name, '_y'];

                x_bouts = arrayfun(@(x) tSnap.(body_part_x)(position.labeledRegions==x),1:max(position.labeledRegions),'UniformOutput',false);
                y_bouts = arrayfun(@(x) tSnap.(body_part_y)(position.labeledRegions==x),1:max(position.labeledRegions),'UniformOutput',false);

                %this is for quality control, checks the std of the x,y
                %position. 10 - 20 pixels is acceptable.
                qc_data = [cellfun(@(x) std(x),x_bouts);cellfun(@(x) std(x),y_bouts)];

                position.qc_data = qc_data;

                x_med = cellfun(@(x) median(x),x_bouts);
                y_med = cellfun(@(x) median(x),y_bouts);

                position.med_data = array2table([x_med',y_med',position.rest_bouts],'VariableNames',{'x_pos','y_pos','rest_dur'});

                %get the zt for the quiescent bout
                bout_time = arrayfun(@(x) round(median(find(position.labeledRegions==x))),1:max(position.labeledRegions));
                position.bout_time = bout_time;


            end
        end
    end
end